* Emacs config
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_OPTIONS: toc:2
:EXPORT_FILE_NAME: emacs-configuration
:END:

This is a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] page, documenting my GNU 'Emacs
configuration. ~org-babel-tangle~ is used to output the resulting
~init.el~ file. The source of this file can be viewed [[https://github.com/ben-maclaurin/ben-maclaurin.github.io/blob/main/content-org/all-posts.org#emacs-config][here]].

** Setup Processes
Tasks and operations that are required for the rest of the expressions
to run.

*** Archives
The following lines initialise the package archives.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; archives 

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package
Less verbose package definitions and management...

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; use-package 

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package command-log-mode)
#+end_src

** Core Modifications
A series of QOL changes I have made to the default distribution.

*** Use short answers
Use short answer mode "y" and "n" instead of "yes" and "no".

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq use-short-answers t)
#+end_src

*** Start in cua-mode
Always start in cua-mode, which allows for DWIM pasting, etc.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (cua-mode)
#+end_src

*** Line wrapping
Some line wrapping rules for text and prog modes:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (add-hook 'text-mode-hook '(lambda ()
                              (setq truncate-lines nil
                               word-wrap t)))

  (add-hook 'prog-mode-hook '(lambda ()
                              (setq truncate-lines t
                               word-wrap nil)))
#+end_src

*** Display
Reduce clutter and noise in the default Emacs GUI (e.g. hides scroll
bar and menu bar).

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; display
  
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)	 
  (tool-bar-mode -1)	 
  (menu-bar-mode -1)	 
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Make a clean & minimalist frame
  (use-package frame
      :straight (:type built-in)
      :config
      (setq-default default-frame-alist
                    (append (list
                             '(internal-border-width . 0)
                             '(left-fringe    . 0)
                             '(right-fringe   . 0)
                             '(tool-bar-lines . 0)
                             '(menu-bar-lines . 0)
                             '(vertical-scroll-bars . nil))))
      (setq-default window-resize-pixelwise t)
      (setq-default frame-resize-pixelwise t))
 #+end_src

*** Meta key
Remap the Emacs meta (M) modifier to the macOS command key for
improved ergonomics and comfort.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; meta key
  
  (setq mac-command-modifier 'meta)
#+end_src

*** Font
Set the default font size and face. 

#+begin_src lisp :tangle ~/.emacs.d/init.el
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; font

    (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode))

    (set-face-attribute 'default nil :font "Berkeley Mono-17")
    (set-face-attribute 'fixed-pitch nil :font "Berkeley Mono-17")
    (set-face-attribute 'variable-pitch nil :font "Berkeley Mono-17")
  ;;  (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

*** Open this file
Keybinding to enable swift modification of this file.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; open this file
  
  (global-set-key (kbd "C-x .") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
#+end_src

Once edits have been made, ~org-babel-tangle~ can be executed with
~C-c C-v t~, followed by ~C-x r .~ to reload ~init.el~:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; reload init file
  
  (global-set-key (kbd "C-x r .") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))
#+end_src

*** Org
A set of configurations extending the [[https://orgmode.org/][org major mode]]. 

**** Allow for mouse usage
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (require 'org-mouse)
#+end_src

**** Set the size of org-mode bullets
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+end_src

**** Hide emphasis markers

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq org-hide-emphasis-markers t)
#+end_src

**** org-capture-templates
~org-capture~ is a helpful utility which enables the quick collation
of thoughts/ideas/tasks (and their contexts).

I have specified the following templates and keybindings:

**** todo-keywords
Modify the default to-do keywords

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; org todo keywords
  
  (setq org-todo-keywords
      '((sequence "TODO" "IN PROGRESS" "|" "DONE" "DELEGATED")))
#+end_src

**** org-agenda
Keybinding for org-agenda mode:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; org agenda mode
  
  (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda)))
#+end_src

*** Movement mnemonics
Two motion mnemonics inspired by ~C-n~ and ~C-p~ which jump eight
lines (plus or minus depending on direction):

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; movement mnemonics
  
  (global-set-key (kbd "M-n") (lambda () (interactive) (next-line 8)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (previous-line 8)))
#+end_src

*** Visual line mode
Keybinding to toggle visual-line-mode for buffer wrapping:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; visual line mode
  
  (global-set-key (kbd "C-x v l") (lambda () (interactive) (visual-line-mode 'toggle)))
#+end_src

*** Desktop save mode
Save previously opened buffers

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (desktop-save-mode 1)
#+end_src

*** Org agenda files location
Set the location for agenda files:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; org agenda files location
  
  (setq org-agenda-files '("~/org/task.org"))
#+end_src

*** Line numbers

Enable relative line numbers in editors.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; line numbers

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Save place
Persist cursor locations across sessions.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; save place

  (save-place-mode 1)
#+end_src

*** Allow hash key entry on macOS
#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; allow hash key entry on macOS
  
  (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
#+end_src

*** Change the default scratch message

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (setq initial-buffer-choice "~/org/learn/self.org")
#+end_src

*** Save file with CMD-S
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "M-s") 'save-some-buffers)
#+end_src

** Packages
External packages I have installed.

*** tree-sitter
An incremental tree parsing package that provides syntax
highlighting. The lines below install ~tree-sitter~ and enable the
mode globally.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; tree-sitter

  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** rust-mode
Major mode support for the Rust programming language.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; rust-mode

  (use-package rust-mode
      :config
    (require 'rust-mode))
#+end_src

*** ef-themes
A beautiful and accessible collection of themes by Prot Stavrou.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ef-themes

  ;;(use-package ef-themes :config (load-theme 'ef-light))
#+end_src

*** ox-hugo
~oxhugo~ provides org export support for Hugo-compatible markdown (it
powers this blog).

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ox-hugo
  
  (use-package ox-hugo
      :config
    (with-eval-after-load 'ox
      (require 'ox-hugo)))
#+end_src

*** magit
~magit~ is an interface for Git. ~C-x m~ is bound to ~magit-status~
for ease-of-access:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; magit

  (use-package magit
      :config
    (global-set-key (kbd "C-x m") (lambda () (interactive) (split-window-right) (other-window-prefix) (magit-status) (setq unread-command-events (listify-key-sequence "$")))))
#+end_src

*** avy

This package uses char-based decision trees for optimal buffer
navigation. ~C-;~ is bound to ~avy-goto-char~:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; avy

  (use-package avy
      :config
    ;; (global-set-key (kbd "C-;") 'avy-goto-char)
    (global-set-key (kbd "C-l") 'avy-goto-line))
#+end_src

*** swiper
Better search:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; swiper

  (use-package swiper)
  (global-set-key "\C-s" 'swiper)
#+end_src

*** vertico
Vertico is a performant and minimalistic completion tool which extends the default Emacs UI. I use it as an Ivy replacement.

#+begin_src lisp :tangle ~/.emacs.d/init.el
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; vertico

  (use-package vertico
      :init
    (vertico-mode)
    (setq vertico-count 20)
    (setq completion-styles '(substring orderless basic))

    (setq read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t))

  (use-package vertico-directory
      :after vertico
      :ensure nil
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


  ;; Optionally use the `orderless' completion style.
  (use-package orderless
      :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))


#+end_src

*** marginalia
Provides rich descriptions next to minibuffer completions.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; marginalia

  (use-package marginalia
      :init
    (marginalia-mode))
#+end_src

*** counsel
#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; counsel
  
  (use-package counsel)
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-q") nil)
  ;;(global-set-key (kbd "C-c g") 'counsel-git-grep)
  (global-set-key (kbd "M-SPC") 'counsel-git)
  (global-set-key (kbd "C-SPC") 'switch-to-buffer)
  (global-set-key (kbd "C-x b") nil)
#+end_src

*** elfeed
Serves RSS feeds. The following lines define my subscription list:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; elfeed

  (use-package elfeed
      :config
    (setq elfeed-feeds
          '("https://ben-maclaurin.github.io/index.xml"
            "https://ciechanow.ski/atom.xml"
            "https://fasterthanli.me/index.xml"
            "https://hnrss.org/frontpage"
            "https://nitter.net/hlissner/rss"
            "https://nitter.net/karpathy/rss"
            "https://nitter.net/aratramba/rss"
            "https://nitter.net/ohhdanm/rss"
            "https://lexfridman.com/feed/podcast/"
            "https://nitter.net/ukutaht/rss"
            "https://nitter.net/chris_mccord/rss"
            "https://nitter.net/josevalim/rss"
            "https://nitter.net/jonhoo/rss"
            "https://nitter.net/rich_harris/rss")))
#+end_src

~C-x w~ launches elfeed:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

Keybinding to update the feeds:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x u") 'elfeed-update)
#+end_src

*** which-key
A minor mode that provides prompts and tips around an incomplete key
sequence:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; which-key

  (use-package which-key
      :config
    (require 'which-key)
    (which-key-mode))
#+end_src

*** eglot
An LSP client... tries to match a locally-installed LSP with the current buffer:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; eglot

  (use-package eglot
      :bind (("C--" . eglot-format-buffer)))
#+end_src

*** expand-region
Increase a selection by a set of semantic units.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; expand-region

  (use-package expand-region)
#+end_src

*** company-mode
A completions helper. Improves on the existing eglot completion mechanism:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; company-mode

  (use-package company
      :config
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** evil-mode
Vim emulation for Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (unless (package-installed-p 'evil)
    (package-install 'evil))
  (setq evil-want-C-u-scroll t) 
  (require 'evil)
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (evil-mode 1)
#+end_src

*** key-chord
Switch to normal mode by pressing ~j~ and ~k~ in quick succession.

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package key-chord
      :config
    (setq key-chord-two-keys-delay 0.3)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (key-chord-mode 1))
#+end_src

*** meow
A modal editor.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; meow

  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7) 
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   ;;'("." . meow-bounds-of-thing)
   '("." . er/expand-region)
   ;;'("[" . meow-beginning-of-thing)
   ;;'("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("x" . meow-delete)
   '("X" . meow-backward-delete)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-open-below)
   '("O" . meow-open-above)
   ;;'("p" . meow-yank)
   '("p" . yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("d" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("/" . meow-bounds-of-thing)
   '("e" . meow-mark-word)
   '("E" . meow-mark-symbol)
   '("v" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   ;;'("s" . meow-hyper-mode)
   '("\"" . meow-hyper-string)
   '("(" . meow-hyper-paren)
   '(")" . meow-hyper-paren)
   '("'" . meow-hyper-quote)
   '("{" . meow-hyper-curly)
   '("}" . meow-hyper-curly)
   '("[" . meow-hyper-bracket)
   '("]" . meow-hyper-bracket)
   '("<escape>" . ignore)))
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package meow
      :config
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1)
    (setq meow-expand-hint-remove-delay 2.0)
    (meow-setup-indicator))
#+end_src

Register a new inner bound for <> tags:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (meow-thing-register 'tag '(pair ("<") (">")) '(pair ("<") (">")))

  (add-to-list 'meow-char-thing-table '(?\( . round))
  (add-to-list 'meow-char-thing-table '(?\) . round))
  (add-to-list 'meow-char-thing-table '(?\" . string))

  (add-to-list 'meow-char-thing-table '(?\{ . curly))
  (add-to-list 'meow-char-thing-table '(?\} . curly))
  
  (add-to-list 'meow-char-thing-table '(?\[ . square))
  (add-to-list 'meow-char-thing-table '(?\] . square))
  #+end_src

**** meow-hyper
Create a /hyper/ mode for meow.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; meow-hyper

  (setq meow-hyper-keymap (make-keymap))
  (meow-define-state hyper
    "a hyper mode for meow insertions"
    :lighter " [H]"
    :keymap meow-hyper-keymap)

  (setq meow-cursor-type-hyper 'hollow)

  (meow-define-keys 'hyper
    '("<escape>" . meow-normal-mode)
    '("h" . meow-hyperhtml-mode))
#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (defun meow-hyper-string () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "\"")
               (goto-char (region-beginning))
               (insert "\""))
             (insert "\"\"")
             (meow-normal-mode)))

  (defun meow-hyper-quote () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "'")
               (goto-char (region-beginning))
               (insert "'"))
             (insert "'")
             (meow-normal-mode)))

  (defun meow-hyper-paren () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert ")")
               (goto-char (region-beginning))
               (insert "("))
             (insert "()")
             (meow-normal-mode)))

  (defun meow-hyper-curly () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "}")
               (goto-char (region-beginning))
               (insert "{"))
             (insert "{}")
             (meow-normal-mode)))

  (defun meow-hyper-bracket () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "]")
               (goto-char (region-beginning))
               (insert "["))
             (insert "[]")
             (meow-normal-mode)))

    (defun meow-hyper-tag () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert ">")
               (goto-char (region-beginning))
               (insert "<"))
             (insert "<>")
             (meow-normal-mode)))
#+end_src

***** meow-hyper-html
A meow hyper mode specifically designed around HTML entry.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; meow-hyper-html

  (setq meow-hyperhtml-keymap (make-keymap))
  (meow-define-state hyperhtml
    "a hyper mode for meow insertions"
    :lighter " [HH]"
    :keymap meow-hyperhtml-keymap)

  (setq meow-cursor-type-hyperhtml 'hbar)

  (meow-define-keys 'hyperhtml
    '("<escape>" . meow-normal-mode)
    '("d" . meow-hyper-html-div-class)
    '("D" . meow-hyper-html-div)
    '("p" . meow-hyper-html-p-class)
    '("P" . meow-hyper-html-p))

#+end_src

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (defun meow-hyper-html-div () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "</div>")
               (goto-char (region-beginning))
               (insert "<div>") (meow-normal-mode))
             (insert "<div></div>")
             (meow-normal-mode)))

  (defun meow-hyper-html-div-class () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "</div>")
               (goto-char (region-beginning))
               (insert "<div className=\"\">") (meow-normal-mode))
             (insert "<div className=\"\"></div>")
             (meow-normal-mode)))

  (defun meow-hyper-html-p () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "</p>")
               (goto-char (region-beginning))
               (insert "<p>") (meow-normal-mode))
             (insert "<p></p>")
             (meow-normal-mode)))

  (defun meow-hyper-html-p-class () (interactive)
         (if (and transient-mark-mode mark-active)
             (progn
               (goto-char (region-end))
               (insert "</p>")
               (goto-char (region-beginning))
               (insert "<p className=\"\">") (meow-normal-mode))
             (insert "<p className=\"\"></p>")
             (meow-normal-mode)))
#+end_src

*** typescript-mode
Adds Typescript support to Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; typescript-mode
  
  (use-package typescript-mode
      :after tree-sitter
      :config
      (define-derived-mode typescriptreact-mode typescript-mode
        "TypeScript TSX")

      (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
      (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

#+end_src

*** aphelia
Auto formatting for TS documents.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; aphelia  

  (use-package apheleia
      :ensure t
      :config
      (apheleia-global-mode +1))

#+end_src

*** go-mode

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; go-mode
  
  (use-package go-mode)
#+end_src

*** savehist
Persist minibuffer history across Emacs sessions:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; savehist

  (use-package savehist
      :init
    (savehist-mode))
#+end_src

*** elixir-mode
#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; elixir-mode
  
  (use-package elixir-mode)
#+end_src

*** elixir-ls
Setup the Elixir Language Server:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (require 'eglot)

  (add-to-list 'eglot-server-programs '(elixir-mode "~/elixir-ls/language_server.sh"))
#+end_src

*** pulsar
*** move-text
Easily move lines up and down in the editor.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; move-text
  
  (use-package move-text
      :init
    (global-set-key (kbd "M-j") 'move-text-line-down)
    (global-set-key (kbd "M-k") 'move-text-line-up)
    (global-set-key (kbd "C-S-j") 'move-text-down)
    (global-set-key (kbd "C-S-k") 'move-text-up)

    (move-text-default-bindings))
#+end_src

*** clojure-mode

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package clojure-mode)
#+end_src

*** devdocs
Provides devdocs support with syntax highlighting:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; devdocs
  
  (use-package devdocs
      :config
    (global-set-key (kbd "C-h D") 'devdocs-lookup))
#+end_src

*** ox-epub
Create .epub documents using org-mode:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package ox-epub)
#+end_src

*** rainbow-delimiters
#+begin_src lisp :tangle ~/.emacs.d/init.el
      (use-package rainbow-delimiters
          :config
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** olivetti
A simple mode that allows for a nice writing view/style (focused mode).

#+begin_src lisp :tangle ~/.emacs.d/init.el
      (use-package olivetti)
#+end_src

*** org-bullets
Prefix org headings with little ASCII bullets!

#+begin_src lisp :tangle ~/.emacs.d/init-bin.el
  (use-package org-bullets
      :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** anki-editor
Create Anki notes from within Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package anki-editor
      :bind (("C-c i i" . anki-editor-insert-note)
             ("C-c i p" . anki-editor-push-notes)))
#+end_src

*** python-mode
An Emacs mode for python:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package python-mode)
#+end_src

*** request
Make HTTP request from Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package request)
#+end_src

*** restclient
A REPL for rest-based requests.

#+begin_src lisp :tangle ~/.emacs.d/init.el
          (use-package restclient
              :init
            (require 'restclient))
#+end_src

*** org-modern
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package org-modern
      :init

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")(setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")
    (global-org-modern-mode))

  (modify-all-frames-parameters
 '((right-divider-width . 1)
   (internal-border-width . 20)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))

#+end_src

*** hyperbole
Hyopertextual button support for Emacs.

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package hyperbole
      :init
    (hyperbole-mode 1)
    :config
    (setq hbmap:dir-user "~/org/")
    (setq hyrolo-date-format "%d-%m-%Y %H:%M:%S")
    (setq hyrolo-file-list '("~/org/notes.org")))
  #+end_src

*** org-remark
Highlight text inside org files:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package org-remark
      :config
    (require 'org-remark-global-tracking)
    (org-remark-global-tracking-mode +1))
#+end_src

*** web-mode
Webmode for editing html and heex files:

#+begin_src lisp :tangle ~/.emacs.d/init.el
      (use-package web-mode
          :init
        (add-to-list 'auto-mode-alist '("\\.[lh]?eex\\'" . web-mode)))
#+end_src

*** ripgrep
A client/Emacs interface for ripgrep:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package rg
      :bind ("C-;" . rg-dwim)
      ("C-x g" . rg))
#+end_src

*** modus-themes v4
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (add-to-list 'load-path "~/.emacs.d/modus-themes")
  (require 'modus-themes)
  (load-theme 'modus-operandi-tinted)
#+end_src

*** focus
#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package focus)
#+end_src

*** denote
A note taking package built by Prot.

#+begin_src lisp :tangle ~/.emacs.d/init.el
      (use-package denote
          :config
        (setq denote-directory (expand-file-name "~/org/denote/")))
#+end_src

*** nov-xwidget
Read epub documents inside Emacs:

#+begin_src lisp :tangle ~/.emacs.d/init.el
  (use-package nov)

  (use-package nov-xwidget
      :demand t
      :after nov
      :config
      (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
      (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src
